<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_battery_medium</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
randomize();
image_speed = 0.2 //Animation Init Speed

LV_Speed = random_range(.4,.5); //Movement Speed
LV_JumpSpeed = random_range(2,5)//Jump Speed
LV_Gravity = 0.1; //Gravity
LV_Jumping = 0; //Flag for jumping
LV_Jump = 0.55;

hspd = 3; //Speed var init
vspd = 0; //Speed var init
move = irandom(1);

if move = 0{
    move--
}

grounded = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
    
    ///////////////////
    //Calculate Input//
    ///////////////////
    
    //LEFT RIGHT
    
    if move = 1 and place_meeting(x+1,y,obj_collision)
    {
        move = -1
        grounded = true;
    }
    else if move = -1 and place_meeting(x-1,y,obj_collision)
    {
        move = 1
        grounded = true;
    }
    
    //hspd = move * LV_Speed
    hspd = LV_Speed
    
    //JUMP
    if (vspd &lt; 7) 
    {
        vspd += LV_Gravity
    }
    
    if place_meeting(x,y+1,obj_collision)
    {
        vspd = LV_Jump * -LV_JumpSpeed
        
        if LV_JumpSpeed &gt; 0{ //Decrease speed and bounce
            
            //LV_Speed -= 0.2;
            //LV_JumpSpeed -= 1;
            
            if  LV_Speed &lt; 0{ //If speed is negative, make 0
            
                LV_Speed = 0;
            }
        }
        else{ //When jumpspeed is 0 or less, jump is removed
            
            LV_Speed = 0;
            LV_Jump = 0;
        }
    grounded = true;
    }
    
    /////////////
    //Collision//
    /////////////
    
    //VERTICAL
    if place_meeting(x,y+vspd,obj_collision)
    {
        
        while (!place_meeting(x,y+sign(vspd),obj_collision))
        {
            y += sign(vspd)
        }
        vspd = 0
        grounded = true;        
    }
    
    //HORIZONTAL
    if place_meeting(x+hspd,y,obj_collision)
    {
        //Check for slope
        var yplus = 0;
        while (place_meeting(x+hspd,y-yplus,obj_collision) and yplus &lt;= abs(1*hspd))
        {
            yplus +=1   
        }
        
        //If hit a wall, check for collision
        if place_meeting(x+hspd, y-yplus, obj_collision)
        {
            while (!place_meeting(x+sign(hspd),y,obj_collision))
            {
                x += sign(hspd)
            }
            hspd = 0
        }
        //If hit a slope, move up or down
        else
        {
            y -= yplus;
        }
        grounded = true;
    }
    
    ////////////////////
    //Stop Bounce/Move//
    ////////////////////
    
    if (vspd &lt; 0) grounded = false;
    
    if (grounded == false) {
        can_land_sound = true;
    } else {
        can_land_sound = false;
    }
    
    if (place_meeting(x,y+1,obj_collision)) {
        if (can_land_sound == true) {
            audio_play_sound(snd_coin_ground,8,false);
            can_land_sound = false;
        }
    }

    
    /////////////
    //Change XY//
    /////////////
    
    x += hspd
    y += vspd

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collect coins

//Add value to wallet
if place_meeting(x,y,obj_player) {
    global.battery += 5;
    audio_play_sound(snd_coin_collect,8,false);
    
    //Destroy coin
    with(self){
        instance_destroy();
    }
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
