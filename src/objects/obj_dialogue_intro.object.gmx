<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HOW TO USE
//diestware.tumblr.com

/*///////////////////////////////
////      Start a chat      /////
/////////////////////////////////

// First create an array with your desired messages. for example:
message[0] = "Hello this is the first message!";
message[0] = "This is the second message!";

// Secondly, if you have a portrait sprite, write the name of the sprite
// as the second parameter. The default sprite size is 50x50.
// If you don't want a portrait just write "none"

// Then when you're ready call this script to start the chat in game:
newChat(message, portrait);

*/




/*///////////////////////////////
////    Effects in chat     /////
/////////////////////////////////

// If you'd like to have effects in your message then you must put the
// correct modifier code. For example:
message[0] = "\4Wavy text";

// The modifier code is "\" followed by the number for the corresponding effect.
// The modifiers are as follows:
\0 - Normal text
\1 - Shaky text
\2 - Color text
\3 - Color &amp; shake text
\4 - Wavy text
\5 - Gradient text
\6 - Gradiest &amp; wavy text

// We can mix and match the effects by doing the following:
message[0] = "\0Normal \1Shaky \2Color \4Wavy";

*/




/*///////////////////////////////
////      Editing Chat      /////
/////////////////////////////////

// WARNING
// Not recommended unless you're an advanced user

// Go to the listed line number in the Draw GUI event to edit

// To move around the chat box go to line 19
// To move around the portrait go to line 21
// To move around the text starting position go to line 38 for the Y and 40-41 for the X
// To edit the chat sound go to line 75
// To edit any of the modifiers they start at line 109
// To add a new modifier add a new case in the switch statement starting at line 109
// To edit how many characters fit on each line go to line 28-29
// To edit space between characters go to line 26
// To edit time between characters go to line 35

*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
message_current = 0;
timer = 0;
cutoff = 0;
portrait = "none";
chat_finish = false;

t = 0;
//Amplitude &amp; Freq for Wavy Text
amplitude = 3;
freq = 2;

done = false;

//Input
input = false;
t_input = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Done
if (done)
{
    //global.talking = false;
    instance_destroy();
    //global.pause = 0;
}

//if (keyboard_check_pressed(ord('R'))) game_restart();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Detect input
input = keyboard_check_pressed(ord('Z')) || gamepad_button_check_pressed(0, gp_face1);

if (t_input &gt; 0) {
    t_input -= 1;
    input = 0;
} else {
    input = 1;
    t_input = 100;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Text

//t is for modifiers
t++;

//Set Font
draw_set_font(f_chat);
//draw_set_font(global.font);

//Set Colour
draw_set_colour(c_white);

//Read in array length
message_end = array_length_1d(message);

//If there are messages
if (message_end &gt; 0)
{
    //Draw chat box
    draw_sprite(spr_chatbox_blank, 0, view_wview[0]/2, view_hview[0]-65);
    //Draw Portrait
    if (portrait != "none") draw_sprite(portrait, 0, 10, view_hview[0]-60);
        
    //This is for the effects
    var modifier = 0;
    //Character Width
    var charWidth = 7;
    //How many characters allowed in each line
    if (portrait == "none") var lineEnd = 42;
    else var lineEnd = 42;
    //Variables for spacing characters
    var line = 0;
    var space = 0;
    var i = 1;
    //Delay time between printing each character
    var delay = 1;
    
    //Text Position
    var tY = view_hview[0]-60;
    //Change the horizontal position if there is a portrait
    if (portrait == "none") var tX = 14;
    //else var tX = 100;
    else var tX = 14;
    
    //If we are done printing out the current message
    if (cutoff == string_length(message[message_current]))
    {
        //draw blinking cursor
        timer++;
        if (timer &lt; 15) draw_sprite(spr_cursor_classic, 0, view_wview[0]-15, view_hview[0]-15);
        if (timer &gt; 30) timer = 0;
        
        //Check player input
        if (input)
        {
            //If we still have messages left, go to next message
            if (message_current &lt; message_end-1)
            {
                message_current++;
                cutoff = 0;
            }
            //If we dont, make done = true and destroy this object
            else 
            {
                timer = 0;
                done = true;
                chat_finish = true;
            }
        }
    }
    
    //Typewriter
    //This is so we print each character one at a time
    if (cutoff &lt; string_length(message[message_current]))
    {
        if (timer &gt;= delay)
        {
            audio_play_sound(snd_text, 10, false);
            cutoff++;
            timer = 0;
        }
        else timer++;
        
        //If player presses button, display the entire message.
        if (input &amp;&amp; cutoff &gt; 2)
        {
            cutoff = string_length(message[message_current]);
        }
    }
    
    //Text
    while(i &lt;= string_length(message[message_current]) &amp;&amp; i &lt;= cutoff)
    {   
        //check for modifier
        if (string_char_at(message[message_current], i) == "\")
        {
            modifier = real(string_char_at(message[message_current], ++i));
            ++i;
        }
        
        //Go to next line
        //Check if the current word fits inside the text box, and if not we go to the next line
        var length = 0;
        while (string_char_at(message[message_current], i) != " " &amp;&amp; i &lt;= string_length(message[message_current]))
        {
            i++;
            length++;
        }
        
        if (space+length &gt; lineEnd)
        {
            space = 0;
            line++;
        }
        i -= length;
        
        //Draw Text
        switch(modifier)
        {
            case 0: //normal
            {
                draw_set_colour(c_white);
                draw_text(tX+(space*charWidth), tY+(13*line), string_char_at(message[message_current], i));
                break;
            }
            case 1: //shaky
            {
                draw_set_colour(c_white);
                draw_text(tX+(space*charWidth)+random_range(-1, 1), tY+(13*line)+random_range(-1, 1), string_char_at(message[message_current], i));
                break;
            }
            case 2: //color
            {
                draw_set_colour(c_lime);
                draw_text(tX+(space*charWidth), tY+(13*line), string_char_at(message[message_current], i));
                break;
            }
            case 3: //color and shake
            {
                draw_set_colour(c_lime);
                draw_text(tX+(space*charWidth)+random_range(-1, 1), tY+(13*line)+random_range(-1, 1), string_char_at(message[message_current], i));
                break;
            }
            case 4: //Sine movement
            {
                var so = t + i;
                var shift = sin(so*pi*freq/room_speed)*amplitude;
                draw_set_colour(c_white);
                draw_text(tX+(space*charWidth), tY+(13*line)+shift, string_char_at(message[message_current], i));
                break;
            }
            case 5: //Gradient Text
            {
                draw_set_colour(make_colour_hsv(t+i, 255, 255));
                draw_text(tX+(space*charWidth), tY+(13*line), string_char_at(message[message_current], i));
                break;
            }
            case 6: //Gradient &amp; Sine
            {
                draw_set_colour(make_colour_hsv(t+i, 255, 255));
                var so = t + i;
                var shift = sin(so*pi*freq/room_speed)*amplitude;
                draw_text(tX+(space*charWidth), tY+(13*line)+shift, string_char_at(message[message_current], i));
                break;
            }
        }
        
        //Move to next character
        space++;
        i++;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
