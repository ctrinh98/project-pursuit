<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_critter_red</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize variables
enemy_hp = 6;
grav = 0.3;
spd = 1;
jspd = 10;
hspd = 0;
vspd = 0;
image_speed = 0;
grounded = false;
t_dmg = 80;
t_ground = 20;
rest = true;
attack = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Face the player's direction
image_xscale = -1;

if (place_meeting(x, y+1, obj_collision) || place_meeting(xprevious, yprevious+1, obj_collision)) {
    image_index = 0;
    hspd = 0;
    vspd = 0;
    if (t_ground &gt; 0) {
        t_ground -= 1;
    } else {
        image_index = 2;
        t_ground = 10;
        audio_play_sound(snd_critter_jump,5,false);
        grav = 0.07;
        hspd = 0.5;
        jump_rise = true;
        vspd = -3.2;
        grounded = true;
    }
} else {
    grounded = false;
    if (vspd &gt; 0) {
        grav = 0.1;
    }
    if (vspd &lt; 10) {
        vspd += grav;
    }
/*    if (jkeyr &amp;&amp; vspd &lt;= -jspd/3) {
        vspd = -jspd/3;
        grav = 0.3;
        jump_rise = false;
    } else if (vspd &gt; -jspd/3) {
        grav = 0.3;
        jump_rise = false;
    } */
}

/*
if (place_meeting(x,y+1,obj_collision)) {
    hspd = 0;
    if (t_ground &gt; 0) {
        t_ground -= 1;
    } else {
        t_ground = 30;
        audio_play_sound(snd_critter_jump,5,false);
        vspd = -5;
        hspd = 0.9;
    }
}
*/

//Gravity
if (vspd &lt; 10) {
    vspd += grav;
}

if (place_meeting(x, y+1, obj_collision) || place_meeting(xprevious, yprevious+1, obj_collision)) {
    grounded = true;
} else {
    grounded = false;
}

var yslope = 0;

// Move down a slope
if (!place_meeting(x+hspd, y, obj_collision) &amp;&amp; abs(hspd) &gt; 0 &amp;&amp; place_meeting(x, y+1, obj_collision)) {
    while (!place_meeting(x+hspd, y-yslope, obj_collision) &amp;&amp; yslope &gt;= -abs(hspd)) {
        yslope--;
    }
    
    // Make sure we actually need to move down
    if (yslope != 0 &amp;&amp; place_meeting(x+hspd, y-yslope+1, obj_collision)) {
        y -= yslope;
    }
}

// Horizontal check
if (place_meeting(x+hspd, y, obj_collision)) {
    yplus = 0;
    while (place_meeting(x+hspd,y-yplus,obj_collision) &amp;&amp; yplus &lt;= abs(1*hspd)) yplus += 1;
    if place_meeting(x+hspd,y-yplus,obj_collision) {
        while (!place_meeting(x+sign(hspd),y,obj_collision)) x+=sign(hspd);
        hspd = 0;
    } else {
        y -= yplus
    }
}

//Move horizontally
x += hspd;

//Vertical collisions
if (place_meeting(x, y+vspd, obj_collision)) {
    while (!place_meeting(x, y+sign(vspd), obj_collision)) {
        y+= sign(vspd);
    }
    vspd = 0;
}

//Move vertically
y += vspd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
