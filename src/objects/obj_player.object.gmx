<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize variables
grav = 0.3;
fric = 0.12;
spd = 1.5;
jspd = 2.18;
def_grav = grav;
def_fric = fric;
def_spd = spd;
def_jspd = jspd;
jump_rise = false;
hspd = 0;
vspd = 0;
counter_footsteps = 0;
move_pressed = 1;
hit_by_enemy = false;
t_dmg = 0;
t_air = 100;
t_shield_timer = 0;
t_air_timer = 0;
global.player_hp = 50;
global.player_max_hp = global.player_hp;
collapse = true;
WeaponCount = 2;
SelectedWeaponIndex = 1;
SecondsBetweenShots = 0.1;
SecondsSinceLastShot = 0;
TotalShots = 100;
CurrentShots = 100;
t_machine_refill = 0;
machine_sound = 0.1;
seconds_since_machine_sound = 0;
dmgtext = "0";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main

if (global.pause) exit;

//Get the player's input
var rkey = keyboard_check(vk_right);
var lkey = keyboard_check(vk_left);
var ukey = keyboard_check(vk_up);
var dkey = keyboard_check(vk_down);
var jkey = keyboard_check_pressed(ord('Z'));
var jkeyr = keyboard_check_released(ord('Z'));
var skey = keyboard_check_pressed(ord('X'));
var move = (-keyboard_check(vk_left)) + (keyboard_check(vk_right));

/*if (collapse) {
    sprite_index = spr_player_collapse;
    if (rkey || lkey || ukey || dkey || jkey || skey) {
        audio_play_sound(snd_player_jump,8,false)
        vspd = -3;
        can_land_sound = true;
    }
    if (place_meeting(x,y+1, obj_collision)) {
        if (can_land_sound == true) {
            audio_play_sound(snd_player_fall_ground,8,false);
            can_land_sound = false;
            collapse = false;
        }
    }
} else {*/

image_speed = 0.25;

if (place_meeting(x, y+1, obj_collision) || place_meeting(xprevious, yprevious+1, obj_collision)) {
    vspd = 0;
    if (jkey) {
        grav = 0.05;
        jump_rise = true;
        vspd = -jspd;
    }
    grounded = true;
} else {
    grounded = false;
    if (vspd &lt; 10) {
        vspd += grav;
    }
    if (jkeyr &amp;&amp; vspd &lt;= -jspd/3) {
        vspd = -jspd/3;
        grav = 0.3;
        jump_rise = false;
    } else if (vspd &gt; -jspd/3) {
        grav = 0.3;
        jump_rise = false;
    }
}


//Moving right
if (rkey) {
    if (hspd &lt; spd) {
        hspd += fric;
    } else {
        hspd = spd;
    }
}

//Moving left
if (lkey) {
    if (hspd &gt; -spd) {
        hspd -= fric;
    } else {
        hspd = -spd;
    }
}

//Check for not moving
if ((!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey)) {
    if (hspd != 0) {
        if (hspd &lt; 0) {
            hspd += fric;
        } else {
            hspd -= fric;
        }
    }
}

var yslope = 0;

// Move down a slope
if (!place_meeting(x+hspd, y, obj_collision) &amp;&amp; abs(hspd) &gt; 0 &amp;&amp; place_meeting(x, y+1, obj_collision)) {
    while (!place_meeting(x+hspd, y-yslope, obj_collision) &amp;&amp; yslope &gt;= -abs(hspd)) {
        yslope--;
    }
    
    // Make sure we actually need to move down
    if (yslope != 0 &amp;&amp; place_meeting(x+hspd, y-yslope+1, obj_collision)) {
        y -= yslope;
    }
}

// Horizontal check
if (place_meeting(x+hspd, y, obj_collision)) {
    yplus = 0;
    while (place_meeting(x+hspd,y-yplus,obj_collision) &amp;&amp; yplus &lt;= abs(1*hspd)) yplus += 1;
    if place_meeting(x+hspd,y-yplus,obj_collision) {
        while (!place_meeting(x+sign(hspd),y,obj_collision)) x+=sign(hspd);
        hspd = 0;
    } else {
        y -= yplus
    }
}

//Move horizontally
//if (!place_meeting(x+hspd, y, obj_collision)) {
    x += hspd;
//}

//Vertical collisions
if (place_meeting(x, y+vspd, obj_collision)) {
    while (!place_meeting(x, y+sign(vspd), obj_collision)) {
        y+= sign(vspd);
    }
    vspd = 0;
}

//Move vertically
y += vspd;

/*
if (place_meeting(x,y,obj_water || obj_water_slope_e || obj_water_slope_w)) {
    grav = 0.15;
    fric = 0.09;
} else {
    grav = 0.3;
    fric = 0.12;
}
*/

//Sound effects
if (keyboard_check_pressed(ord('Z'))) {
    if (!place_meeting(x,y+1,obj_collision) &amp;&amp; grounded == true) {
        audio_play_sound(snd_player_jump,8,false)
    }
}

if (move != 0 &amp;&amp; grounded == true &amp;&amp; counter_footsteps == 0) {
    audio_play_sound(snd_player_footstep,8,false);
    counter_footsteps = 10;
} else if (counter_footsteps &gt; 0) {
    counter_footsteps--;
}

if (grounded == false) {
    can_land_sound = true;
} else {
    can_land_sound = false;
}

if (place_meeting(x,y+1,obj_collision)) {
    if (can_land_sound == true) {
        audio_play_sound(snd_player_fall_ground,8,false);
        can_land_sound = false;
    }
}

if (place_meeting(x,y+1,obj_collision)) {
    can_ceiling_sound = true;
}

if (place_meeting(x,y-1,obj_collision) &amp;&amp; can_ceiling_sound == true) {
    instance_create(x,y-10,obj_collide_ceiling);
    instance_create(x,y-10,obj_collide_ceiling);
    //audio_play_sound(snd_player_fall_ground,8,false);
    can_ceiling_sound = false;
}

/*

if (keyboard_check_pressed(ord('C'))) {
    //instance_create(x,y-10,obj_collide_ceiling);
    circle = instance_create(x,y-10,obj_spur_outline);
    with circle {
        instance_create(x,y,obj_spur_a);
        instance_create(x,y,obj_spur_b);
        instance_create(x,y,obj_spur_c);
    }
}

*/

//} // collapse

x = round(x);
y = round(y);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shooting

//SelectedWeaponIndex[0] = single
//SelectedWeaponIndex[1] = machine
//SelectedWeaponIndex[2] = ???

if keyboard_check_pressed(ord('Q')) {
    //Switch to the next weapon up
    SelectedWeaponIndex = SelectedWeaponIndex - 1
    //If we've gone too far, loop forward
    if SelectedWeaponIndex &lt; WeaponCount - WeaponCount {
        SelectedWeaponIndex = WeaponCount - 1;
    }
} else if keyboard_check_pressed(ord('W')) {
    //Switch to the next weapon up
    SelectedWeaponIndex = SelectedWeaponIndex + 1;
    //If we've gone too far, loop back
    if SelectedWeaponIndex &gt;= WeaponCount {
        SelectedWeaponIndex = 0;
    }
    audio_play_sound(snd_weapon_switch,5,false);
}

move = (-keyboard_check(vk_left) + keyboard_check(vk_right));

//Machine gun refill
if (CurrentShots &lt; TotalShots &amp;&amp; (!keyboard_check(ord('X')))) {
    t_machine_refill += 1;
    //Changed it to 5 instead of 10 to speed it up x2
    if (t_machine_refill &gt;= 5) {
        CurrentShots += 1;
        t_machine_refill = 0;
    }
}

if (obj_player.SelectedWeaponIndex = 0 &amp;&amp; WeaponCount &gt; 0) {

    if (keyboard_check_pressed(ord('X'))) {
        audio_play_sound(snd_gun_shoot,5,false);
    /*    if (image_xscale == 1) {
            bullet = instance_create(x+1,y+1,obj_bullet);
            bullet.speed = 500 / room_speed
        } else if (image_xscale == -1) {
            bullet = instance_create(x-1,y+1,obj_bullet);
            bullet.speed = 500 / room_speed
        }*/
        
        if (dkey) {
            if (vspd != 0) {
                bullet = instance_create(x+1,y+19,obj_bullet);
                bullet.speed = 500 / room_speed
                bullet.direction = 270;
                bullet.image_angle = 270;
                instance_create(x,y+10,obj_bullet_fire);
            } else {
                image_index = spr_player_standing;
                if (image_xscale == 1) {
                    bullet = instance_create(x+19,y+1,obj_bullet);
                    bullet.speed = 500 / room_speed
                    bullet.direction = 0;
                    bullet.image_angle = 0;
                    instance_create(x+10,y,obj_bullet_fire);
                } else if (image_xscale == -1) {
                    bullet = instance_create(x-19,y+1,obj_bullet);
                    bullet.speed = 500 / room_speed
                    bullet.direction = 180;
                    bullet.image_angle = 180;
                    instance_create(x-10,y,obj_bullet_fire);
                }
            }
        } else if (ukey) {
            bullet = instance_create(x+1,y-19,obj_bullet);
            bullet.speed = 500 / room_speed
            bullet.direction = 90;
            bullet.image_angle = 90;
            instance_create(x,y-10,obj_bullet_fire);
        } else if (lkey &amp;&amp; !dkey) {
            bullet = instance_create(x-19,y+1,obj_bullet);
            bullet.speed = 500 / room_speed
            bullet.direction = 180;
            bullet.image_angle = 180;
            instance_create(x-10,y,obj_bullet_fire);
        } else if (rkey &amp;&amp; !dkey) {
            bullet = instance_create(x+19,y+1,obj_bullet);
            bullet.speed = 500 / room_speed
            bullet.direction = 0;
            bullet.image_angle = 0;
            instance_create(x+10,y,obj_bullet_fire);
        } else {
            if (image_xscale == 1) {
                bullet = instance_create(x+19,y+1,obj_bullet);
                bullet.speed = 500 / room_speed
                bullet.direction = 0;
                bullet.image_angle = 0;
                instance_create(x+10,y,obj_bullet_fire);
            } else if (image_xscale == -1) {
                bullet = instance_create(x-19,y+1,obj_bullet);
                bullet.speed = 500 / room_speed
                bullet.direction = 180;
                bullet.image_angle = 180;
                instance_create(x-10,y,obj_bullet_fire);
    //        } else {
      //          bullet.direction = 0;
        //        bullet.image_angle = 0;
            }
        }   
    }

} else if (obj_player.SelectedWeaponIndex = 1 &amp;&amp; WeaponCount &gt; 1) {

    //Increment timer
    SecondsSinceLastShot = SecondsSinceLastShot + 1/room_speed
        
    //If we're clicking AND we're ready to fire
    if (keyboard_check(ord('X')) &amp;&amp; SecondsSinceLastShot &gt;= SecondsBetweenShots &amp;&amp; CurrentShots &gt; 0) {
        audio_play_sound(snd_gun_shoot,5,false);
        SecondsSinceLastShot = 0
        CurrentShots -= 1;
    /*    if (image_xscale == 1) {
            bullet = instance_create(x+1,y+1,obj_bullet);
            bullet.speed = 500 / room_speed
        } else if (image_xscale == -1) {
            bullet = instance_create(x-1,y+1,obj_bullet);
            bullet.speed = 500 / room_speed
        }*/
                
        if (dkey) {
            if (vspd != 0) {
                bullet = instance_create(x+1,y+19,obj_machine_bullet);
                bullet.speed = 500 / room_speed
                bullet.direction = 270 + random_range(-3,3);
                bullet.image_angle = 270;
                instance_create(x,y+10,obj_bullet_fire);
                //Machine gun flight
                //if (keyboard_check(ord('Z'))) {
                    //obj_player.vspd -= 0.82;
                //} else {
                    obj_player.vspd = -2.4;
                //}
            } else {
                image_index = spr_player_standing;
                if (image_xscale == 1) {
                    bullet = instance_create(x+19,y+1,obj_machine_bullet);
                    bullet.speed = 500 / room_speed
                    bullet.direction = random_range(-3,3);
                    bullet.image_angle = 0;
                    instance_create(x+10,y,obj_bullet_fire);
                } else if (image_xscale == -1) {
                    bullet = instance_create(x-19,y+1,obj_machine_bullet);
                    bullet.speed = 500 / room_speed
                    bullet.direction = 180 + random_range(-3,3);
                    bullet.image_angle = 180;
                    instance_create(x-10,y,obj_bullet_fire);
                }
            }
        } else if (ukey) {
            bullet = instance_create(x+1,y-19,obj_machine_bullet);
            bullet.speed = 500 / room_speed
            bullet.direction = 90 + random_range(-3,3);
            bullet.image_angle = 90;
            instance_create(x,y-10,obj_bullet_fire);
        } else if (lkey &amp;&amp; !dkey) {
            bullet = instance_create(x-19,y+1,obj_machine_bullet);
            bullet.speed = 500 / room_speed
            bullet.direction = 180 + random_range(-3,3);
            bullet.image_angle = 180;
            instance_create(x-10,y,obj_bullet_fire);
        } else if (rkey &amp;&amp; !dkey) {
            bullet = instance_create(x+19,y+1,obj_machine_bullet);
            bullet.speed = 500 / room_speed
            bullet.direction = random_range(-3,3);
            bullet.image_angle = 0;
            instance_create(x+10,y,obj_bullet_fire);
        } else {
            if (image_xscale == 1) {
                bullet = instance_create(x+19,y+1,obj_machine_bullet);
                bullet.speed = 500 / room_speed
                bullet.direction = random_range(-3,3);
                bullet.image_angle = 0;
                instance_create(x+10,y,obj_bullet_fire);
            } else if (image_xscale == -1) {
                bullet = instance_create(x-19,y+1,obj_machine_bullet);
                bullet.speed = 500 / room_speed
                bullet.direction = 180 + random_range(-3,3);
                bullet.image_angle = 180;
                instance_create(x-10,y,obj_bullet_fire);
    //        } else {
      //          bullet.direction = 0;
        //        bullet.image_angle = 0;
            }
/*        Kick = 750 / room_speed
        KickDirection = bullet.image_angle + 180    
        x = x + lengthdir_x(Kick,KickDirection)
        y = y + lengthdir_y(Kick,KickDirection)
*/
        }   
    } else if (keyboard_check(ord('X')) &amp;&amp; SecondsSinceLastShot &gt;= SecondsBetweenShots &amp;&amp; CurrentShots &lt;= 0) {
                    
        seconds_since_machine_sound += 1/room_speed;
        
        if (seconds_since_machine_sound &gt;= machine_sound) {
            audio_play_sound(snd_machine_empty,5,false);
            seconds_since_machine_sound = 0;
        }
    
        if (!instance_exists(obj_machine_empty)) {
            empty_anim = instance_create(x-1,y-5,obj_machine_empty);
        }
        
    }

} else {

}

/*

if (keyboard_check_pressed(ord('V'))) {
    instance_create(x,y,obj_sword_right);
}

*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control the sprites

move = (-keyboard_check(vk_left)) + (keyboard_check(vk_right));

if (move != 0) {
    image_xscale = move;
}

if (place_meeting(x,y+1,obj_collision)) {
    if (move == 0) {
        if (dkey) {
            sprite_index = spr_player_down_ground;
        }
        else if (ukey) {
            sprite_index = spr_player_up_standing;
        } else {
            sprite_index = spr_player_standing;
        }
    } else if (move != 0) {
        if (ukey) {
            sprite_index = spr_player_up_walking;
        } else {
            sprite_index = spr_player_walking;
        }
    }
} else {
    if (vspd &lt; 0) {
        if (dkey) {
            sprite_index = spr_player_down_air;
        } else if (ukey) {
            sprite_index = spr_player_up_jumping;
        } else {
            sprite_index = spr_player_jumping;
        }
    } else {
        if (dkey) {
            sprite_index = spr_player_down_air;
        } else if (ukey) {
            sprite_index = spr_player_up_falling;
        } else {
            sprite_index = spr_player_falling;
        }
    }
}

/*
if (yprevious != y) {
    //sprite_index = sJumping;
    //image_speed = 0.3;
    image_index = y &gt; yprevious;
} else {
    if (xprevious != x) {
        sprite_index = spr_player_walking;
        //image_speed = 0.3;
    } else {
        sprite_index = spr_player_standing;
    }
}

//Control the direction the player is facing
if (xprevious &lt; x) {
    image_xscale = 1;
} else if (xprevious &gt; x) {
    image_xscale = -1;
}
*/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enemy collision damage

enemy_exist = instance_place(x,y,obj_critter_red);
bat_exist = instance_place(x,y,obj_bat_red);
spike_exist = instance_place(x,y,obj_spikes);

if (instance_exists(enemy_exist) &amp;&amp; hit_by_enemy == false &amp;&amp; global.player_hp &lt;= 6) {
//    audio_stop_sound(global.bgm);
    sprite_index = spr_blank;
    global.pause = 1;
    global.player_hp = 0;
//    for (var i = 0; i &lt; 40; i++) {
//        instance_create(random_range(x-30,x+30),random_range(y-30,y+30),obj_player_death);
//    }
//    audio_sound_gain(global.static, 0.0, 0);
    audio_stop_sound(global.bgm);
    audio_stop_sound(global.static);
    if (global.gameover == false) {
        global.pause = 1;
        audio_play_sound(snd_player_death,5,false);
        instance_create(view_xview, view_yview,obj_gameover_start);
        global.gameover = true;
    }

} else if (instance_exists(enemy_exist) &amp;&amp; hit_by_enemy == false &amp;&amp; global.player_hp &gt; 6) {
    dmgtext = "-6";
    hit_by_enemy = true;
    global.player_hp -= 6;
    audio_play_sound(snd_player_damage,5,false);
    vspd = -5;
    hspd = sign(x-enemy_exist.x)*2.5;
    //Blink player sprite
    t_dmg = 80;
    
    if (place_meeting(x,y+1,obj_collision) &amp;&amp; hit_by_enemy == true) {
        //hit_by_enemy = false;
    }
}

if (instance_exists(bat_exist) &amp;&amp; hit_by_enemy == false &amp;&amp; global.player_hp &lt;= 2) {
//    audio_stop_sound(global.bgm);
    sprite_index = spr_blank;
    global.pause = 1;
    global.player_hp = 0;
//    for (var i = 0; i &lt; 40; i++) {
//        instance_create(random_range(x-30,x+30),random_range(y-30,y+30),obj_player_death);
//    }
//    audio_sound_gain(global.static, 0.0, 0);
    audio_stop_sound(global.bgm);
    audio_stop_sound(global.static);
    if (global.gameover == false) {
        global.pause = 1;
        audio_play_sound(snd_player_death,5,false);
        instance_create(view_xview, view_yview,obj_gameover_start);
        global.gameover = true;
    }

} else if (instance_exists(bat_exist) &amp;&amp; hit_by_enemy == false &amp;&amp; global.player_hp &gt; 2) {
    dmgtext = "-2";
    hit_by_enemy = true;
    global.player_hp -= 2;
    audio_play_sound(snd_player_damage,5,false);
    vspd = -5;
    hspd = sign(x-bat_exist.x)*2.5;
    //Blink player sprite
    t_dmg = 80;
    
    if (place_meeting(x,y+1,obj_collision) &amp;&amp; hit_by_enemy == true) {
        //hit_by_enemy = false;
    }
}

if (instance_exists(spike_exist) &amp;&amp; hit_by_enemy == false &amp;&amp; global.player_hp &lt;= 5) {
    audio_stop_sound(global.bgm);
    audio_stop_sound(global.static);
    sprite_index = spr_blank;
    global.pause = 1;
    global.player_hp = 0;
    if (global.gameover == false) {
        global.pause = 1;
        audio_play_sound(snd_player_death,5,false);
        instance_create(view_xview, view_yview,obj_gameover_start);
        global.gameover = true;
    }

} else if (instance_exists(spike_exist) &amp;&amp; hit_by_enemy == false &amp;&amp; global.player_hp &gt; 5) {
    dmgtext = "-5";
    hit_by_enemy = true;
    global.player_hp -= 5;
    audio_play_sound(snd_player_damage,5,false);
    vspd = -3;
    hspd = sign(x-spike_exist.x)*2.5;
    //Blink player sprite
    t_dmg = 80;
    
    if (place_meeting(x,y+1,obj_collision) &amp;&amp; hit_by_enemy == true) {
        //hit_by_enemy = false;
    }
}

if t_dmg &gt; 0 {
    if image_alpha = 0 {
        image_alpha = 1;
        global.damage_flash = 1;
    } else {
        image_alpha = 0;
        global.damage_flash = 0;
    }
    t_dmg -=1;
} else {
    image_alpha = 1;
    global.damage_flash = 1;
    hit_by_enemy = false;
}



/*
Set the vspeed to a low negative value like -3.
Set the hspeed to sign(x-other.x)*2.
Set a variable (e.g. hurt) to true.
Whwn colliding with the ground, set the variable to false.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Water collision
if (place_meeting(x,y,obj_water)) {
    obj_player.grav = 0.1;
    obj_player.fric = 0.08;
    obj_player.spd = 1.2;
    obj_player.jspd = 2;
} else {
/*    obj_player.grav = def_grav;
    obj_player.fric = def_fric;
    obj_player.spd = def_spd;
    obj_player.jspd = def_jspd;*/
    
//    obj_player.grav = 0.3;
    obj_player.fric = 0.12;
    obj_player.spd = 1.5;
    if (place_meeting(xprevious,yprevious,obj_water) &amp;&amp; (!place_meeting(x,y+1,obj_wall))) {
        grav = 0.3;
        jump_rise = false;
    }
    obj_player.jspd = 2.18;


}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
x = player_x;
y = player_y;
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw weapon

if (global.pause == 0) {
    
    move = (-keyboard_check(vk_left)) + (keyboard_check(vk_right));
    move_pressed = (-keyboard_check_pressed(vk_left)+keyboard_check_pressed(vk_right));
    
    if (SelectedWeaponIndex = 0 &amp;&amp; WeaponCount &gt; 0) {
    
        if (move == 0) {
            if (sprite_index == spr_player_down_air) {
                draw_sprite_ext(spr_gun_down, 0, x, y, image_xscale, 1, 0, image_blend, image_alpha);
            } else if (sprite_index == spr_player_up_jumping || sprite_index == spr_player_up_falling) {
                draw_sprite_ext(spr_gun_up, 0, x, y, image_xscale, 1, 0, image_blend, image_alpha);
            } else if (sprite_index == spr_player_jumping || sprite_index == spr_player_falling) {
                draw_sprite_ext(spr_gun_side, 0, x, y, image_xscale, 1, 0, image_blend, image_alpha);
            } else if (sprite_index == spr_player_standing) {
                draw_sprite_ext(spr_gun_side, 0, x, y, image_xscale, 1, 0, image_blend, image_alpha);
            } else if (sprite_index == spr_player_up_standing) {
                draw_sprite_ext(spr_gun_up, 0, x, y, image_xscale, 1, 0, image_blend, image_alpha);
            } else if (sprite_index == spr_player_down_ground) {
                draw_sprite_ext(spr_gun_side, 0, x, y, image_xscale, 1, 0, image_blend, image_alpha);
            }
        } else if (vspd == 0) {
            if (keyboard_check(vk_up)) {
                draw_sprite_ext(spr_gun_up, 0, x, y, move, 1, 0, image_blend, image_alpha);
            } else {
                draw_sprite_ext(spr_gun_side, 0, x, y, move, 1, 0, image_blend, image_alpha);
            }
        } else {
            if (keyboard_check(vk_down)) {
                draw_sprite_ext(spr_gun_down, 0, x, y, move, 1, 1, image_blend, image_alpha);
            } else if (keyboard_check(vk_up)) {
                draw_sprite_ext(spr_gun_up, 0, x, y, image_xscale, 1, 0, image_blend, image_alpha);
            } else {
                draw_sprite_ext(spr_gun_side, 0, x, y, image_xscale, 1, 0, image_blend, image_alpha);
            }
        }
    } else if (SelectedWeaponIndex = 1 &amp;&amp; WeaponCount &gt; 1) {
    
        if (move == 0) {
            if (sprite_index == spr_player_down_air) {
                draw_sprite_ext(spr_machine_down, 0, x, y, image_xscale, 1, 0, image_blend, image_alpha);
            } else if (sprite_index == spr_player_up_jumping || sprite_index == spr_player_up_falling) {
                draw_sprite_ext(spr_machine_up, 0, x, y, image_xscale, 1, 0, image_blend, image_alpha);
            } else if (sprite_index == spr_player_jumping || sprite_index == spr_player_falling) {
                draw_sprite_ext(spr_machine_side, 0, x, y, image_xscale, 1, 0, image_blend, image_alpha);
            } else if (sprite_index == spr_player_standing) {
                draw_sprite_ext(spr_machine_side, 0, x, y, image_xscale, 1, 0, image_blend, image_alpha);
            } else if (sprite_index == spr_player_up_standing) {
                draw_sprite_ext(spr_machine_up, 0, x, y, image_xscale, 1, 0, image_blend, image_alpha);
            } else if (sprite_index == spr_player_down_ground) {
                draw_sprite_ext(spr_machine_side, 0, x, y, image_xscale, 1, 0, image_blend, image_alpha);
            }
        } else if (vspd == 0) {
            if (keyboard_check(vk_up)) {
                draw_sprite_ext(spr_machine_up, 0, x, y, move, 1, 0, image_blend, image_alpha);
            } else {
                draw_sprite_ext(spr_machine_side, 0, x, y, move, 1, 0, image_blend, image_alpha);
            }
        } else {
            if (keyboard_check(vk_down)) {
                draw_sprite_ext(spr_machine_down, 0, x, y, move, 1, 1, image_blend, image_alpha);
            } else if (keyboard_check(vk_up)) {
                draw_sprite_ext(spr_machine_up, 0, x, y, image_xscale, 1, 0, image_blend, image_alpha);
            } else {
                draw_sprite_ext(spr_machine_side, 0, x, y, image_xscale, 1, 0, image_blend, image_alpha);
            }
        }
    }


}

if (hit_by_enemy) {
    draw_set_font(global.font_damage);
    draw_set_halign(fa_center);
    draw_text(x+3,y-18,dmgtext);
}

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
